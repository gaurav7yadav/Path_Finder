import React from "react";
import './canvas.css';

class Canvas extends React.Component {
  state = {
    coord: [],
    minimumCost: 0,
  };

  newCanvas() {
    let newcoord = [];
    const ctx = this.canvas.getContext("2d");
    this.setState({ coord: newcoord }, function () {
      this.props.draw(this.canvas, ctx, this.state.coord);
    });
  }

  setCost(cost) {
    this.setState({ minimumCost: cost });
  }

  prims() {
    let visited = [];
    let unvisited = [];
    let total = 0;
    for (let i in this.state.coord) {
      unvisited.push(this.state.coord[i]);
    }
    let length = unvisited.length;
    let first = unvisited[0];

    visited.push(first);
    unvisited.splice(0, 1);

    while (length > 1) {
      let minEdge = Infinity;
      let parent = null;
      let currentVertex = null;
      for (let i in visited) {
        for (let j in unvisited) {
          let weight = this.calWeight(
            visited[i][0],
            visited[i][1],
            unvisited[j][0],
            unvisited[j][1]
          );
          if (minEdge > weight) {
            minEdge = weight;
            currentVertex = j;
            parent = i;
          }
        }
      }
      minEdge = minEdge / 5;
      minEdge = Math.round(minEdge);
      total += minEdge;
      this.props.drawPrims(
        minEdge,
        parent,
        currentVertex,
        visited,
        unvisited,
        this.canvas,
        this.canvas.getContext("2d")
      );
      visited.push(unvisited[currentVertex]);
      unvisited.splice(currentVertex, 1);
      length = length - 1;
    }
    this.setCost(total);
  }

  calWeight(x1, y1, x2, y2) {
    let x = Math.pow(x1 - x2, 2);
    let y = Math.pow(y1 - y2, 2);
    return Math.sqrt(x + y);
  }

  componentDidMount() {
    const ctx = this.canvas.getContext("2d");
    this.props.outline(this.canvas, ctx);
  }

  render() {
    let width = window.innerWidth - 45;
    let height = window.innerHeight * 0.6;

    return (
      <div id="head">
        <div className="pt-2 pb-2 text-light container-float" style={{ backgroundColor: "#262626" }}>
          <div className="d-flex justify-content-center navbar-brand ml-4">Minimum Spanning Tree</div>
        </div>

        <div className="instructions">
          You can start drawing the MST by clicking on canvas.&nbsp;&nbsp;
          <b style={{ color: 'red' }}>Left-Click</b>&nbsp;to Add |&nbsp;
          <b style={{ color: 'red' }}>Right-Click</b>&nbsp;to Remove.
        </div>

        <div className="instructions">
          Generated by&nbsp;<b>Prim's Algorithm</b>&nbsp;using&nbsp;
          <b>Euclidean Distances</b>&nbsp;as weights of graph
        </div>

        <div className="mst-cost">
          <div>
            <b>{this.state.minimumCost === 0 ? "Minimum Spanning Tree Cost is displayed here " : "Minimum Spanning Tree Cost : " + this.state.minimumCost}</b>
          </div>
          <button
            className="btn btn-outline-dark pt-2"
            onClick={() => {
              this.newCanvas();
              this.setCost(0);
            }}
          >
            <b>Clear Canvas</b>
          </button>
        </div>

        <canvas
          className="mr-4 ml-4 mt-2 bg-light"
          onClick={(e) => {
            const ctx = this.canvas.getContext("2d");
            let coord = [];
            let xypair = [];
            coord.push(e.clientX);
            coord.push(e.clientY);

            xypair.push(coord);

            if (this.state.coord.length === 0) {
              this.setState({ coord: xypair }, function () {
                this.props.draw(this.canvas, ctx, this.state.coord);
              });
            } else {
              let newCoord = this.state.coord;
              newCoord.push(xypair[0]);
              this.setState({ coord: newCoord }, function () {
                this.props.draw(this.canvas, ctx, this.state.coord);
                this.prims();
              });
            }
          }}
          onContextMenu={(e) => {
            e.preventDefault();
            const ctx = this.canvas.getContext("2d");
            let coordX = e.clientX;
            let coordY = e.clientY;
            let coord = this.state.coord;

            for (let i in this.state.coord) {
              let isInside =
                Math.sqrt(
                  Math.pow(coord[i][0] - coordX, 2) +
                    Math.pow(coord[i][1] - coordY, 2)
                ) < 8;
              if (isInside) {
                coord.splice(i, 1);
                break;
              }
            }
            this.setState({ coord: coord }, function () {
              this.props.draw(this.canvas, ctx, this.state.coord);
              this.prims();
            });
          }}
          ref={(node) => (this.canvas = node)}
          width={width}
          height={height}
        />
      </div>
    );
  }
}

export default Canvas;
